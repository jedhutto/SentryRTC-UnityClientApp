//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputControls/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Tracks"",
            ""id"": ""473d8f65-baf3-49df-8af6-21d3b954c6bb"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""fad97973-988e-44d1-882f-89f845b3a49a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Call"",
                    ""type"": ""Button"",
                    ""id"": ""39e7fd28-faff-4ac1-bef4-fc0706690406"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HangUp"",
                    ""type"": ""Button"",
                    ""id"": ""93139566-a400-478c-abb6-66f364afa48b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraLook"",
                    ""type"": ""Value"",
                    ""id"": ""a919ac9c-08c2-4694-b153-329039519dfa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c88a8371-669f-44c0-a4fc-6302cbf88395"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""Call"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""999b3776-e1ef-4e30-a78b-ccc0007f3706"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""HangUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd6b2f33-b7a5-43b3-8e3c-67bfea927625"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e358e985-892c-4dc7-b813-afe9de42a938"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""CameraLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraLook"",
            ""id"": ""9f8cf958-6e3e-40f0-94b5-c981d936b18f"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Xbox Control Scheme"",
            ""bindingGroup"": ""Xbox Control Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Tracks
        m_Tracks = asset.FindActionMap("Tracks", throwIfNotFound: true);
        m_Tracks_Movement = m_Tracks.FindAction("Movement", throwIfNotFound: true);
        m_Tracks_Call = m_Tracks.FindAction("Call", throwIfNotFound: true);
        m_Tracks_HangUp = m_Tracks.FindAction("HangUp", throwIfNotFound: true);
        m_Tracks_CameraLook = m_Tracks.FindAction("CameraLook", throwIfNotFound: true);
        // CameraLook
        m_CameraLook = asset.FindActionMap("CameraLook", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tracks
    private readonly InputActionMap m_Tracks;
    private List<ITracksActions> m_TracksActionsCallbackInterfaces = new List<ITracksActions>();
    private readonly InputAction m_Tracks_Movement;
    private readonly InputAction m_Tracks_Call;
    private readonly InputAction m_Tracks_HangUp;
    private readonly InputAction m_Tracks_CameraLook;
    public struct TracksActions
    {
        private @InputMaster m_Wrapper;
        public TracksActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Tracks_Movement;
        public InputAction @Call => m_Wrapper.m_Tracks_Call;
        public InputAction @HangUp => m_Wrapper.m_Tracks_HangUp;
        public InputAction @CameraLook => m_Wrapper.m_Tracks_CameraLook;
        public InputActionMap Get() { return m_Wrapper.m_Tracks; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TracksActions set) { return set.Get(); }
        public void AddCallbacks(ITracksActions instance)
        {
            if (instance == null || m_Wrapper.m_TracksActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TracksActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Call.started += instance.OnCall;
            @Call.performed += instance.OnCall;
            @Call.canceled += instance.OnCall;
            @HangUp.started += instance.OnHangUp;
            @HangUp.performed += instance.OnHangUp;
            @HangUp.canceled += instance.OnHangUp;
            @CameraLook.started += instance.OnCameraLook;
            @CameraLook.performed += instance.OnCameraLook;
            @CameraLook.canceled += instance.OnCameraLook;
        }

        private void UnregisterCallbacks(ITracksActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Call.started -= instance.OnCall;
            @Call.performed -= instance.OnCall;
            @Call.canceled -= instance.OnCall;
            @HangUp.started -= instance.OnHangUp;
            @HangUp.performed -= instance.OnHangUp;
            @HangUp.canceled -= instance.OnHangUp;
            @CameraLook.started -= instance.OnCameraLook;
            @CameraLook.performed -= instance.OnCameraLook;
            @CameraLook.canceled -= instance.OnCameraLook;
        }

        public void RemoveCallbacks(ITracksActions instance)
        {
            if (m_Wrapper.m_TracksActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITracksActions instance)
        {
            foreach (var item in m_Wrapper.m_TracksActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TracksActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TracksActions @Tracks => new TracksActions(this);

    // CameraLook
    private readonly InputActionMap m_CameraLook;
    private List<ICameraLookActions> m_CameraLookActionsCallbackInterfaces = new List<ICameraLookActions>();
    public struct CameraLookActions
    {
        private @InputMaster m_Wrapper;
        public CameraLookActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_CameraLook; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraLookActions set) { return set.Get(); }
        public void AddCallbacks(ICameraLookActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraLookActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraLookActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(ICameraLookActions instance)
        {
        }

        public void RemoveCallbacks(ICameraLookActions instance)
        {
            if (m_Wrapper.m_CameraLookActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraLookActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraLookActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraLookActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraLookActions @CameraLook => new CameraLookActions(this);
    private int m_XboxControlSchemeSchemeIndex = -1;
    public InputControlScheme XboxControlSchemeScheme
    {
        get
        {
            if (m_XboxControlSchemeSchemeIndex == -1) m_XboxControlSchemeSchemeIndex = asset.FindControlSchemeIndex("Xbox Control Scheme");
            return asset.controlSchemes[m_XboxControlSchemeSchemeIndex];
        }
    }
    public interface ITracksActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCall(InputAction.CallbackContext context);
        void OnHangUp(InputAction.CallbackContext context);
        void OnCameraLook(InputAction.CallbackContext context);
    }
    public interface ICameraLookActions
    {
    }
}
